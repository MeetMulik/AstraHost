generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Deployments {
  projectId              String
  deployment_url         String?
  deployment_status      DeploymentStatus @default(NOT_STARTED)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime
  deployment_description String?
  deploymentId           String           @id
  Projects               Projects         @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
}

model Projects {
  projectId     String        @id
  projectName   String
  description   String?
  github_url    String
  sub_domain    String        @unique
  custom_domain String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime
  Deployments   Deployments[]
}

enum DeploymentStatus {
  QUEUED
  IN_PROGRESS
  READY
  FAILED
  NOT_STARTED
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
