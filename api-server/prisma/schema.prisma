generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Projects {
  projectId    String        @id @default(cuid())
  projectName  String
  description  String?
  githubUrl    String        @map("github_url")
  subdomain    String        @unique @map("sub_domain")
  customDomain String?       @map("custom_domain")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Deployments  Deployments[]
}

model Deployments {
  projectId             String
  deploymentUrl         String?          @map("deployment_url")
  deploymentStatus      DeploymentStatus @default(NOT_STARTED) @map("deployment_status")
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  deploymentDescription String?          @map("deployment_description")
  deploymentId          String           @id @default(cuid())
  project               Projects         @relation(fields: [projectId], references: [projectId], onDelete: Cascade)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime
  User              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  User                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  User         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  Account       Account[]
  Authenticator Authenticator[]
  Session       Session[]
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum DeploymentStatus {
  QUEUED
  IN_PROGRESS
  READY
  FAILED
  NOT_STARTED
}
